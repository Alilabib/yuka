(function(global,factory){typeof exports==="object"&&typeof module!=="undefined"?factory(exports):typeof define==="function"&&define.amd?define(["exports"],factory):factory(global.YUKA=global.YUKA||{})})(this,function(exports){"use strict";class Telegram{constructor(senderId,receiverId,message,data,delay){this.senderId=senderId;this.receiverId=receiverId;this.message=message;this.data=data;this.delay=delay}}class MessageDispatcher{constructor(entityManager){this.delayedTelegrams=new Array;this.entityManager=entityManager}deliver(receiver,telegram){if(receiver.handleMessage(telegram)===false){console.warn("YUKA.MessageDispatcher: Message not handled by receiver: %o",receiver)}}dispatch(sender,receiver,message,delay,data){const telegram=new Telegram(sender.id,receiver.id,message,data,0);if(delay<=0){this.deliver(receiver,telegram)}else{telegram.delay=delay;this.delayedTelegrams.push(telegram)}}dispatchDelayedMessages(delta){let i=this.delayedTelegrams.length;while(i--){const telegram=this.delayedTelegrams[i];telegram.delay-=delta;if(telegram.delay<=0){const receiver=this.entityManager.getEntityById(telegram.receiverId);this.deliver(receiver,telegram);this.delayedTelegrams.pop()}}}}class EntityManager{constructor(){this.entities=new Map;this.messageDispatcher=new MessageDispatcher(this)}add(entity){this.entities.set(entity.id,entity);entity.addEventListener("message",this.onMessage,this);return this}remove(entity){this.entities.delete(entity.id);entity.removeEventListener("message",this.onMessage);return this}getEntityById(id){return this.entities.get(id)}update(delta){for(let entity of this.entities.values()){entity.update(delta)}this.messageDispatcher.dispatchDelayedMessages(delta)}onMessage(event){const sender=event.target;const receiver=event.receiver;const message=event.message;const delay=event.delay;const data=event.data;this.messageDispatcher.dispatch(sender,receiver,message,delay,data)}}class EventDispatcher{constructor(){this.listeners={}}addEventListener(type,listener,scope){const listeners=this.listeners;if(listeners[type]===undefined){listeners[type]=[]}if(listeners[type].indexOf(listener)===-1){listener.scope=scope;listeners[type].push(listener)}}hasEventListener(type,listener){const listeners=this.listeners;return listeners[type]!==undefined&&listeners[type].indexOf(listener)!==-1}removeEventListener(type,listener){const listeners=this.listeners;const listenerArray=listeners[type];if(listenerArray!==undefined){const index=listenerArray.indexOf(listener);if(index!==-1){listenerArray.splice(index,1)}}}dispatchEvent(event){const listeners=this.listeners;const listenerArray=listeners[event.type];if(listenerArray!==undefined){event.target=this;const array=listenerArray.slice(0);for(let i=0,l=array.length;i<l;i++){const listener=array[i];listener.call(listener.scope||this,event)}}}}const _Math={clamp:(value,min,max)=>{return Math.max(min,Math.min(max,value))}};class Vector3{constructor(x=0,y=0,z=0){this.x=x;this.y=y;this.z=z}set(x,y,z){this.x=x;this.y=y;this.z=z;return this}copy(v){this.x=v.x;this.y=v.y;this.z=v.z;return this}add(v){this.x+=v.x;this.y+=v.y;this.z+=v.z;return this}addScalar(s){this.x+=s;this.y+=s;this.z+=s;return this}addVectors(a,b){this.x=a.x+b.x;this.y=a.y+b.y;this.z=a.z+b.z;return this}sub(v){this.x-=v.x;this.y-=v.y;this.z-=v.z;return this}subScalar(s){this.x-=s;this.y-=s;this.z-=s;return this}subVectors(a,b){this.x=a.x-b.x;this.y=a.y-b.y;this.z=a.z-b.z;return this}multiply(v){this.x*=v.x;this.y*=v.y;this.z*=v.z;return this}multiplyScalar(s){this.x*=s;this.y*=s;this.z*=s;return this}multiplyVectors(a,b){this.x=a.x*b.x;this.y=a.y*b.y;this.z=a.z*b.z;return this}divide(v){this.x/=v.x;this.y/=v.y;this.z/=v.z;return this}divideScalar(s){this.x/=s;this.y/=s;this.z/=s;return this}divideVectors(a,b){this.x=a.x/b.x;this.y=a.y/b.y;this.z=a.z/b.z;return this}dot(v){return this.x*v.x+this.y*v.y+this.z*v.z}cross(v){const x=this.x,y=this.y,z=this.z;this.x=y*v.z-z*v.y;this.y=z*v.x-x*v.z;this.z=x*v.y-y*v.x;return this}crossVectors(a,b){const ax=a.x,ay=a.y,az=a.z;const bx=b.x,by=b.y,bz=b.z;this.x=ay*bz-az*by;this.y=az*bx-ax*bz;this.z=ax*by-ay*bx;return this}angleTo(v){var theta=this.dot(v)/Math.sqrt(this.lengthSq()*v.lengthSq());return Math.acos(_Math.clamp(theta,-1,1))}length(){return Math.sqrt(this.lengthSquared())}lengthSquared(){return this.dot(this)}distanceTo(v){return Math.sqrt(this.distanceToSquared(v))}distanceToSquared(v){const dx=this.x-v.x,dy=this.y-v.y,dz=this.z-v.z;return dx*dx+dy*dy+dz*dz}normalize(){return this.divideScalar(this.length()||1)}applyMatrix4(m){const x=this.x,y=this.y,z=this.z;const e=m.elements;const w=1/(e[3]*x+e[7]*y+e[11]*z+e[15]);this.x=(e[0]*x+e[4]*y+e[8]*z+e[12])*w;this.y=(e[1]*x+e[5]*y+e[9]*z+e[13])*w;this.z=(e[2]*x+e[6]*y+e[10]*z+e[14])*w;return this}applyQuaternion(q){const x=this.x,y=this.y,z=this.z;const qx=q.x,qy=q.y,qz=q.z,qw=q.w;const ix=qw*x+qy*z-qz*y;const iy=qw*y+qz*x-qx*z;const iz=qw*z+qx*y-qy*x;const iw=-qx*x-qy*y-qz*z;this.x=ix*qw+iw*-qx+iy*-qz-iz*-qy;this.y=iy*qw+iw*-qy+iz*-qx-ix*-qz;this.z=iz*qw+iw*-qz+ix*-qy-iy*-qx;return this}equals(v){return v.x===this.x&&v.y===this.y&&v.z===this.z}setFromMatrixColumn(m,i){return this.fromArray(m.elements,i*4)}fromArray(array,offset){if(offset===undefined)offset=0;this.x=array[offset+0];this.y=array[offset+1];this.z=array[offset+2];return this}}class Quaternion{constructor(x=0,y=0,z=0,w=1){this.x=x;this.y=y;this.z=z;this.w=w}set(x,y,z,w){this.x=x;this.y=y;this.z=z;this.w=w;return this}copy(q){this.x=q.x;this.y=q.y;this.z=q.z;this.w=q.w;return this}inverse(){return this.conjugate().normalize()}conjugate(){this.x*=-1;this.y*=-1;this.z*=-1;return this}dot(q){return this.x*q.x+this.y*q.y+this.z*q.z+this.w*q.w}length(){return Math.sqrt(this.lengthSquared())}lengthSquared(){return this.dot(this)}normalize(){let l=this.length();if(l===0){this.x=0;this.y=0;this.z=0;this.w=1}else{l=1/l;this.x=this.x*l;this.y=this.y*l;this.z=this.z*l;this.w=this.w*l}return this}multiply(q){return this.multiplyQuaternions(this,q)}premultiply(q){return this.multiplyQuaternions(q,this)}multiplyQuaternions(a,b){const qax=a.x,qay=a.y,qaz=a.z,qaw=a.w;const qbx=b.x,qby=b.y,qbz=b.z,qbw=b.w;this.x=qax*qbw+qaw*qbx+qay*qbz-qaz*qby;this.y=qay*qbw+qaw*qby+qaz*qbx-qax*qbz;this.z=qaz*qbw+qaw*qbz+qax*qby-qay*qbx;this.w=qaw*qbw-qax*qbx-qay*qby-qaz*qbz;return this}slerp(q,t){if(t===0)return this;if(t===1)return this.copy(q);const x=this.x,y=this.y,z=this.z,w=this.w;let cosHalfTheta=w*q.w+x*q.x+y*q.y+z*q.z;if(cosHalfTheta<0){this.w=-q.w;this.x=-q.x;this.y=-q.y;this.z=-q.z;cosHalfTheta=-cosHalfTheta}else{this.copy(q)}if(cosHalfTheta>=1){this.w=w;this.x=x;this.y=y;this.z=z;return this}const sinHalfTheta=Math.sqrt(1-cosHalfTheta*cosHalfTheta);if(Math.abs(sinHalfTheta)<.001){this.w=.5*(w+this.w);this.x=.5*(x+this.x);this.y=.5*(y+this.y);this.z=.5*(z+this.z);return this}const halfTheta=Math.atan2(sinHalfTheta,cosHalfTheta);const ratioA=Math.sin((1-t)*halfTheta)/sinHalfTheta;const ratioB=Math.sin(t*halfTheta)/sinHalfTheta;this.w=w*ratioA+this.w*ratioB;this.x=x*ratioA+this.x*ratioB;this.y=y*ratioA+this.y*ratioB;this.z=z*ratioA+this.z*ratioB;return this}setFromRotationMatrix(m){const e=m.elements;const m11=e[0],m12=e[4],m13=e[8];const m21=e[1],m22=e[5],m23=e[9];const m31=e[2],m32=e[6],m33=e[10];const trace=m11+m22+m33;if(trace>0){let s=.5/Math.sqrt(trace+1);this.w=.25/s;this.x=(m32-m23)*s;this.y=(m13-m31)*s;this.z=(m21-m12)*s}else if(m11>m22&&m11>m33){let s=2*Math.sqrt(1+m11-m22-m33);this.w=(m32-m23)/s;this.x=.25*s;this.y=(m12+m21)/s;this.z=(m13+m31)/s}else if(m22>m33){let s=2*Math.sqrt(1+m22-m11-m33);this.w=(m13-m31)/s;this.x=(m12+m21)/s;this.y=.25*s;this.z=(m23+m32)/s}else{let s=2*Math.sqrt(1+m33-m11-m22);this.w=(m21-m12)/s;this.x=(m13+m31)/s;this.y=(m23+m32)/s;this.z=.25*s}return this}equals(q){return q.x===this.x&&q.y===this.y&&q.z===this.z&&q.w===this.w}fromArray(array,offset){if(offset===undefined)offset=0;this.x=array[offset+0];this.y=array[offset+1];this.z=array[offset+2];this.w=array[offset+3];return this}}class GameEntity extends EventDispatcher{constructor(){super();this.id=GameEntity.__nextId++;this.name="";this.position=new Vector3;this.rotation=new Quaternion;this.scale=new Vector3(1,1,1);this.up=new Vector3(0,1,0)}update(){console.warn("YUKA.GameEntity: .update() must be implemented in derived class.")}sendMessage(receiver,message,delay=0,data=null){const event={type:"message",receiver:receiver,message:message,delay:delay,data:data};this.dispatchEvent(event)}handleMessage(){return false}}GameEntity.__nextId=0;class Matrix4{constructor(){this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]}set(n11,n12,n13,n14,n21,n22,n23,n24,n31,n32,n33,n34,n41,n42,n43,n44){const e=this.elements;e[0]=n11;e[4]=n12;e[8]=n13;e[12]=n14;e[1]=n21;e[5]=n22;e[9]=n23;e[13]=n24;e[2]=n31;e[6]=n32;e[10]=n33;e[14]=n34;e[3]=n41;e[7]=n42;e[11]=n43;e[15]=n44;return this}identity(){this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1);return this}extractBasis(xAxis,yAxis,zAxis){xAxis.setFromMatrixColumn(this,0);yAxis.setFromMatrixColumn(this,1);zAxis.setFromMatrixColumn(this,2);return this}makeBasis(xAxis,yAxis,zAxis){this.set(xAxis.x,yAxis.x,zAxis.x,0,xAxis.y,yAxis.y,zAxis.y,0,xAxis.z,yAxis.z,zAxis.z,0,0,0,0,1);return this}multiply(m){return this.multiplyMatrices(this,m)}premultiply(m){return this.multiplyMatrices(m,this)}multiplyMatrices(a,b){const ae=a.elements;const be=b.elements;const e=this.elements;const a11=ae[0],a12=ae[4],a13=ae[8],a14=ae[12];const a21=ae[1],a22=ae[5],a23=ae[9],a24=ae[13];const a31=ae[2],a32=ae[6],a33=ae[10],a34=ae[14];const a41=ae[3],a42=ae[7],a43=ae[11],a44=ae[15];const b11=be[0],b12=be[4],b13=be[8],b14=be[12];const b21=be[1],b22=be[5],b23=be[9],b24=be[13];const b31=be[2],b32=be[6],b33=be[10],b34=be[14];const b41=be[3],b42=be[7],b43=be[11],b44=be[15];e[0]=a11*b11+a12*b21+a13*b31+a14*b41;e[4]=a11*b12+a12*b22+a13*b32+a14*b42;e[8]=a11*b13+a12*b23+a13*b33+a14*b43;e[12]=a11*b14+a12*b24+a13*b34+a14*b44;e[1]=a21*b11+a22*b21+a23*b31+a24*b41;e[5]=a21*b12+a22*b22+a23*b32+a24*b42;e[9]=a21*b13+a22*b23+a23*b33+a24*b43;e[13]=a21*b14+a22*b24+a23*b34+a24*b44;e[2]=a31*b11+a32*b21+a33*b31+a34*b41;e[6]=a31*b12+a32*b22+a33*b32+a34*b42;e[10]=a31*b13+a32*b23+a33*b33+a34*b43;e[14]=a31*b14+a32*b24+a33*b34+a34*b44;e[3]=a41*b11+a42*b21+a43*b31+a44*b41;e[7]=a41*b12+a42*b22+a43*b32+a44*b42;e[11]=a41*b13+a42*b23+a43*b33+a44*b43;e[15]=a41*b14+a42*b24+a43*b34+a44*b44;return this}}Object.assign(Matrix4.prototype,{lookAt:function(){const x=new Vector3;const y=new Vector3;const z=new Vector3;return function lookAt(eye,target,up){z.subVectors(eye,target);if(z.lengthSquared()===0){z.z=1}z.normalize();x.crossVectors(up,z);if(x.lengthSquared()===0){if(Math.abs(up.z)===1){z.x+=1e-4}else{z.z+=1e-4}z.normalize();x.crossVectors(up,z)}x.normalize();y.crossVectors(z,x);const e=this.elements;e[0]=x.x;e[4]=y.x;e[8]=z.x;e[1]=x.y;e[5]=y.y;e[9]=z.y;e[2]=x.z;e[6]=y.z;e[10]=z.z;return this}}()});class MovingEntity extends GameEntity{constructor(){super();this.velocity=new Vector3;this.mass=1;this.maxSpeed=1;this.maxForce=100;this.maxTurnRate=Math.PI}getDirection(result=new Vector3){return result.set(0,0,1).applyQuaternion(this.rotation).normalize()}getSpeed(){return this.velocity.length()}getSpeedSquared(){return this.velocity.lengthSquared()}}Object.assign(MovingEntity.prototype,{rotateToTarget:function(){const direction=new Vector3;const rotationMatrix=new Matrix4;const targetRotation=new Quaternion;return function rotateToTarget(target){this.getDirection(direction);const angle=target.angleTo(direction);if(angle<1e-5)return true;const t=angle>this.maxTurnRate?this.maxTurnRate/angle:1;rotationMatrix.lookAt(target,this.position,this.up);targetRotation.setFromRotationMatrix(rotationMatrix);this.rotation.slerp(targetRotation,t);this.velocity.applyQuaternion(this.rotation);return false}}(),lookAt:function(){const rotationMatrix=new Matrix4;return function lookAt(target){rotationMatrix.lookAt(target,this.position,this.up);this.rotation.setFromRotationMatrix(rotationMatrix);return this}}()});const _Math$1={clamp:(value,min,max)=>{return Math.max(min,Math.min(max,value))}};class Vector3$1{constructor(x=0,y=0,z=0){this.x=x;this.y=y;this.z=z}set(x,y,z){this.x=x;this.y=y;this.z=z;return this}copy(v){this.x=v.x;this.y=v.y;this.z=v.z;return this}add(v){this.x+=v.x;this.y+=v.y;this.z+=v.z;return this}addScalar(s){this.x+=s;this.y+=s;this.z+=s;return this}addVectors(a,b){this.x=a.x+b.x;this.y=a.y+b.y;this.z=a.z+b.z;return this}sub(v){this.x-=v.x;this.y-=v.y;this.z-=v.z;return this}subScalar(s){this.x-=s;this.y-=s;this.z-=s;return this}subVectors(a,b){this.x=a.x-b.x;this.y=a.y-b.y;this.z=a.z-b.z;return this}multiply(v){this.x*=v.x;this.y*=v.y;this.z*=v.z;return this}multiplyScalar(s){this.x*=s;this.y*=s;this.z*=s;return this}multiplyVectors(a,b){this.x=a.x*b.x;this.y=a.y*b.y;this.z=a.z*b.z;return this}divide(v){this.x/=v.x;this.y/=v.y;this.z/=v.z;return this}divideScalar(s){this.x/=s;this.y/=s;this.z/=s;return this}divideVectors(a,b){this.x=a.x/b.x;this.y=a.y/b.y;this.z=a.z/b.z;return this}dot(v){return this.x*v.x+this.y*v.y+this.z*v.z}cross(v){const x=this.x,y=this.y,z=this.z;this.x=y*v.z-z*v.y;this.y=z*v.x-x*v.z;this.z=x*v.y-y*v.x;return this}crossVectors(a,b){const ax=a.x,ay=a.y,az=a.z;const bx=b.x,by=b.y,bz=b.z;this.x=ay*bz-az*by;this.y=az*bx-ax*bz;this.z=ax*by-ay*bx;return this}angleTo(v){var theta=this.dot(v)/Math.sqrt(this.lengthSq()*v.lengthSq());return Math.acos(_Math$1.clamp(theta,-1,1))}length(){return Math.sqrt(this.lengthSquared())}lengthSquared(){return this.dot(this)}distanceTo(v){return Math.sqrt(this.distanceToSquared(v))}distanceToSquared(v){const dx=this.x-v.x,dy=this.y-v.y,dz=this.z-v.z;return dx*dx+dy*dy+dz*dz}normalize(){return this.divideScalar(this.length()||1)}applyMatrix4(m){const x=this.x,y=this.y,z=this.z;const e=m.elements;const w=1/(e[3]*x+e[7]*y+e[11]*z+e[15]);this.x=(e[0]*x+e[4]*y+e[8]*z+e[12])*w;this.y=(e[1]*x+e[5]*y+e[9]*z+e[13])*w;this.z=(e[2]*x+e[6]*y+e[10]*z+e[14])*w;return this}applyQuaternion(q){const x=this.x,y=this.y,z=this.z;const qx=q.x,qy=q.y,qz=q.z,qw=q.w;const ix=qw*x+qy*z-qz*y;const iy=qw*y+qz*x-qx*z;const iz=qw*z+qx*y-qy*x;const iw=-qx*x-qy*y-qz*z;this.x=ix*qw+iw*-qx+iy*-qz-iz*-qy;this.y=iy*qw+iw*-qy+iz*-qx-ix*-qz;this.z=iz*qw+iw*-qz+ix*-qy-iy*-qx;return this}equals(v){return v.x===this.x&&v.y===this.y&&v.z===this.z}setFromMatrixColumn(m,i){return this.fromArray(m.elements,i*4)}fromArray(array,offset){if(offset===undefined)offset=0;this.x=array[offset+0];this.y=array[offset+1];this.z=array[offset+2];return this}}const SteeringInterface={TYPES:{NONE:0,SEEK:1,FLEE:2,ARRIVE:4,PURSUIT:8,EVADE:16},seekEnable:function(){this._behaviorFlag|=SteeringInterface.TYPES.SEEK},seekDisable:function(){if(this._isOn(SteeringInterface.TYPES.SEEK))this._behaviorFlag^=SteeringInterface.TYPES.SEEK},seekOn:function(){return(this._behaviorFlag&SteeringInterface.TYPES.SEEK)===SteeringInterface.TYPES.SEEK},fleeEnable:function(){this._behaviorFlag|=SteeringInterface.TYPES.FLEE},fleeDisable:function(){if(this._isOn(SteeringInterface.TYPES.FLEE))this._behaviorFlag^=SteeringInterface.TYPES.FLEE},fleeOn:function(){return(this._behaviorFlag&SteeringInterface.TYPES.FLEE)===SteeringInterface.TYPES.FLEE},arriveEnable:function(){this._behaviorFlag|=SteeringInterface.TYPES.ARRIVE},arriveDisable:function(){if(this._isOn(SteeringInterface.TYPES.ARRIVE))this._behaviorFlag^=SteeringInterface.TYPES.ARRIVE},arriveOn:function(){return(this._behaviorFlag&SteeringInterface.TYPES.ARRIVE)===SteeringInterface.TYPES.ARRIVE},pursuitEnable:function(){this._behaviorFlag|=SteeringInterface.TYPES.PURSUIT},pursuitDisable:function(){if(this._isOn(SteeringInterface.TYPES.PURSUIT))this._behaviorFlag^=SteeringInterface.TYPES.PURSUIT},pursuitOn:function(){return(this._behaviorFlag&SteeringInterface.TYPES.PURSUIT)===SteeringInterface.TYPES.PURSUIT},evadeEnable:function(){this._behaviorFlag|=SteeringInterface.TYPES.EVADE},evadeDisable:function(){if(this._isOn(SteeringInterface.TYPES.EVADE))this._behaviorFlag^=SteeringInterface.TYPES.EVADE},evadeOn:function(){return(this._behaviorFlag&SteeringInterface.TYPES.EVADE)===SteeringInterface.TYPES.EVADE}};class SteeringBehaviors{constructor(vehicle){this.vehicle=vehicle;this.target=new Vector3$1;this.panicDistance=10;this.deceleration=3;this.targetAgent=null;this.weights={seek:1,flee:1,arrive:1,pursuit:1,evade:1};this._steeringForce=new Vector3$1;this._behaviorFlag=0}_calculate(delta,optionalTarget){const result=optionalTarget||new Vector3$1;this._calculatePrioritized(delta);return result.copy(this._steeringForce)}_accumulateForce(forceToAdd){const magnitudeSoFar=this._steeringForce.length();const magnitudeRemaining=this.vehicle.maxForce-magnitudeSoFar;if(magnitudeRemaining<=0)return false;const magnitudeToAdd=forceToAdd.length();if(magnitudeToAdd>magnitudeRemaining){forceToAdd.normalize().multiplyScalar(magnitudeRemaining)}this._steeringForce.add(forceToAdd);return true}}Object.assign(SteeringBehaviors.prototype,{_calculatePrioritized:function(){const force=new Vector3$1;return function _calculatePrioritized(delta){this._steeringForce.set(0,0,0);if(this.evadeOn()===true){force.set(0,0,0);this._evade(this.targetAgent,force);force.multiplyScalar(this.weights.evade);if(this._accumulateForce(force)===false)return}if(this.fleeOn()===true){force.set(0,0,0);this._flee(this.target,force);force.multiplyScalar(this.weights.flee);if(this._accumulateForce(force)===false)return}if(this.seekOn()===true){force.set(0,0,0);this._seek(this.target,force);force.multiplyScalar(this.weights.seek);if(this._accumulateForce(force)===false)return}if(this.arriveOn()===true){force.set(0,0,0);this._arrive(this.target,force,this.deceleration);force.multiplyScalar(this.weights.arrive);if(this._accumulateForce(force)===false)return}if(this.pursuitOn()===true){force.set(0,0,0);this._pursuit(this.targetAgent,force);force.multiplyScalar(this.weights.pursuit);if(this._accumulateForce(force)===false)return}}}(),_seek:function(){const desiredVelocity=new Vector3$1;return function _seek(target,force){const vehicle=this.vehicle;desiredVelocity.subVectors(target,vehicle.position).normalize();desiredVelocity.multiplyScalar(vehicle.maxSpeed);force.subVectors(desiredVelocity,vehicle.velocity)}}(),_flee:function(){const desiredVelocity=new Vector3$1;return function _flee(target,force){const vehicle=this.vehicle;const distanceToTargetSq=vehicle.position.distanceToSquared(target);if(distanceToTargetSq<this.panicDistance*this.panicDistance){desiredVelocity.subVectors(vehicle.position,target).normalize();if(desiredVelocity.lengthSquared()===0){desiredVelocity.set(0,0,1)}desiredVelocity.multiplyScalar(vehicle.maxSpeed);force.subVectors(desiredVelocity,vehicle.velocity)}}}(),_arrive:function(){const desiredVelocity=new Vector3$1;const displacement=new Vector3$1;return function _arrive(target,force,deceleration){const vehicle=this.vehicle;displacement.subVectors(target,vehicle.position);const distance=displacement.length();if(distance>0){let speed=distance/deceleration;speed=Math.min(speed,vehicle.maxSpeed);desiredVelocity.copy(displacement).multiplyScalar(speed/distance);force.subVectors(desiredVelocity,vehicle.velocity)}}}(),_pursuit:function(){const displacement=new Vector3$1;const vehicleDirection=new Vector3$1;const evaderDirection=new Vector3$1;const newEvaderVelocity=new Vector3$1;const predcitedPosition=new Vector3$1;return function _pursuit(evader,force){const vehicle=this.vehicle;if(evader===null){console.error('YUKA.SteeringBehaviors: Target agent not defined for behavior "pursuit" and entity %o.',vehicle);return}displacement.subVectors(evader.position,vehicle.position);vehicle.getDirection(vehicleDirection);evader.getDirection(evaderDirection);const evaderAhead=displacement.dot(vehicleDirection)>0;const facing=vehicleDirection.dot(evaderDirection)<-.95;if(evaderAhead===true&&facing===true){this._seek(evader.position,force);return}const lookAheadTime=displacement.length()/(vehicle.maxSpeed+evader.getSpeed());newEvaderVelocity.copy(evader.velocity).multiplyScalar(lookAheadTime);predcitedPosition.addVectors(evader.position,newEvaderVelocity);this._seek(predcitedPosition,force)}}(),_evade:function(){const displacement=new Vector3$1;const newPuruserVelocity=new Vector3$1;const predcitedPosition=new Vector3$1;return function _evade(pursuer,force){const vehicle=this.vehicle;if(pursuer===null){console.error('YUKA.SteeringBehaviors: Target agent not defined for behavior "evade" and entity %o.',vehicle);return}displacement.subVectors(pursuer.position,vehicle.position);const lookAheadTime=displacement.length()/(vehicle.maxSpeed+pursuer.getSpeed());newPuruserVelocity.copy(pursuer.velocity).multiplyScalar(lookAheadTime);predcitedPosition.addVectors(pursuer.position,newPuruserVelocity);this._flee(predcitedPosition,force)}}()});Object.assign(SteeringBehaviors.prototype,SteeringInterface);class Vehicle extends MovingEntity{constructor(){super();this.steering=new SteeringBehaviors(this);this.smoothing=false}}Object.assign(Vehicle.prototype,{update:function(){const steeringForce=new Vector3;const displacement=new Vector3;const acceleration=new Vector3;const target=new Vector3;return function update(delta){this.steering._calculate(delta,steeringForce);acceleration.copy(steeringForce).divideScalar(this.mass);this.velocity.add(acceleration.multiplyScalar(delta));if(this.getSpeedSquared()>this.maxSpeed*this.maxSpeed){this.velocity.normalize();this.velocity.multiplyScalar(this.maxSpeed)}displacement.copy(this.velocity).multiplyScalar(delta);target.copy(this.position).add(displacement);if(this.getSpeedSquared()>1e-8){if(this.smoothing===true){}else{this.lookAt(target)}}this.position.copy(target)}}()});class State{enter(){}execute(){console.warn("YUKA.State: .execute() must be implemented in derived class.")}exit(){}onMessage(){return false}}class StateMachine{constructor(owner){this.owner=owner;this.currentState=null;this.previousState=null;this.globalState=null}update(){if(this.globalState!==null){this.globalState.execute(this.owner)}if(this.currentState!==null){this.currentState.execute(this.owner)}}changeState(newState){if(newState instanceof State){this.previousState=this.currentState;this.currentState.exit(this.owner);this.currentState=newState;this.currentState.enter(this.owner)}else{console.warn('YUKA.StateMachine: .changeState() needs a parameter of type "YUKA.State".')}}revertToPrevoiusState(){this.changeState(this.previousState)}inState(state){return state===this.currentState}handleMessage(telegram){if(this.currentState!==null&&this.currentState.onMessage(this.owner,telegram)===true){return true}if(this.globalState!==null&&this.globalState.onMessage(this.owner,telegram)===true){return true}return false}}exports.EntityManager=EntityManager;exports.GameEntity=GameEntity;exports.MovingEntity=MovingEntity;exports.Vehicle=Vehicle;exports.State=State;exports.StateMachine=StateMachine;exports._Math=_Math;exports.Matrix4=Matrix4;exports.Quaternion=Quaternion;exports.Vector3=Vector3;Object.defineProperty(exports,"__esModule",{value:true})});
